use serenity::{
  builder::CreateApplicationCommand,
  model::prelude::interaction::application_command::ApplicationCommandInteraction,
  prelude::Context,
};

use crate::{
  bot::commands::{respond_message, CommandOutput},
  session::manager::SessionManager,
  utils::embed::{EmbedBuilder, Status},
};

pub const NAME: &str = "leave";

pub fn run(ctx: Context, command: ApplicationCommandInteraction) -> CommandOutput {
  Box::pin(async move {
    let data = ctx.data.read().await;
    let session_manager = data.get::<SessionManager>().unwrap().clone();

    let session = match session_manager.get_session(command.guild_id.unwrap()).await {
      Some(session) => session,
      None => {
        respond_message(
          &ctx,
          &command,
          EmbedBuilder::new()
            .title("Cannot disconnect bot")
            .description("I'm currently not connected to any voice channel")
            .status(Status::Error)
            .build(),
          true,
        )
        .await;

        return;
      }
    };

    if let Some(owner) = session.owner().await {
      if owner != command.user.id {
        // This message was generated by AI, and I love it.
        respond_message(
          &ctx,
          &command,
          EmbedBuilder::new()
            .description("You are not the one who summoned me")
            .status(Status::Error)
            .build(),
          true,
        )
        .await;

        return;
      };
    }

    session.disconnect().await;

    respond_message(
      &ctx,
      &command,
      EmbedBuilder::new()
        .description("I have left the voice channel, goodbye for now")
        .status(Status::Info)
        .build(),
      false,
    )
    .await;
  })
}

pub fn register(command: &mut CreateApplicationCommand) -> &mut CreateApplicationCommand {
  command
    .name(NAME)
    .description("Request the bot to leave the current voice channel")
}
